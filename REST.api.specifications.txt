# amnonlog.txt
# supercooldb REST API for Eitan

------------------------------------------------
Title: Query sequence:
Description : Get all the annotations about a given sequence
URL: /QuerySeq/?seq=<seq>&region=<region>
Method: GET
URL Params:
	seq : str ('ACGT')
		the sequence string to query the database (can be any length)
	region : int (optional)
		the region id (default=1 which is V4 515F 806R)
Success Response:
	Code : 200
	Content :
	{
		"taxonomy" : str
		(taxonomy from SequencesTable)
		"curations" : list of
			{
				"user" : str
					name of the user who added this annotation 
					(userName from UsersTable)
				"addedDate" : str (DD-MM-YYYY HH:MM:SS)
					date when the annotation was added
					(addedDate from CurationsTable)
				"idExp" : int
					the ID of the experiment from which this annotation originated
					(uniqueId from ExperimentsTable)
					(see Query Experiment)
				"currType" : str
					curration type (differential expression/contaminant/etc.)
					(description from CurationTypesTable)
				"method" : str
					The method used to detect this behavior (i.e. observation/ranksum/clustering/etc")
					(description from MethodTypesTable)
				"agentType" : str
					Name of the program which submitted this annotation (i.e. heatsequer)
					(description from AgentTypesTable)
				"description" : str
					Free text describing this annotation (i.e. "lower in green tomatoes comapred to red ones")
				"private" : bool
					True if the curation is private, False if not
				"CurationList" : list of
					{
						"detail" : str
							the type of detail (i.e. ALL/HIGH/LOW)
							(description from CurationDetailsTypeTable)
						"term" : str
							the ontology term for this detail (i.e. feces/ibd/homo sapiens)
							(description from OntologyTable)
					}
			}
	}
Details :
	Validation:
		If a curation is private, return it only if user is authenticated and created the curation. If user not authenticated, do not return it in the list
		If curation is not private, return it (no need for authentication)

------------------------------------------------
Title: Query experiment based on ID:
Description : Get all experiment details baed on the experiment id
URL: /QueryExpID/?expid=<exp>
Method: GET
URL Params:
	expid : int
		the experiment id
		(expId from ExperimentsTable)
Success Response:
	Code : 200
	Content :
	{
		"expdetails" : list of
		{
			"type" : str
				type of detail about experiment (i.e. title/author/pubmedid/sra/qiitaid etc.)
			"value" : str
				the corresponding value to type (i.e. "Response of bacteria to pita eating"/10262 etc.)
			date : str (DD-MM-YYYY HH:MM:SS)
				date when this detail about the experiment was added
			user : str
				the user who added this detail about the experiment
				(userName from UsersTable)
		}
		isprivate : bool
			true if experiment is private, false if public
		createdby : str
			the user who owns this study (created it in the database)
		date : str (DD-MM-YYYY HH:MM:SS)
			the date when the study was created in the database
	}
Details :
	Validation:
		If study is private, return only if user is authenticated and created the study. If user not authenticated, return Some Error (which?)
		If study is not private, return it (no need for authentication)


------------------------------------------------
Title: Query experiment based on type/value:
Description: Get IDs of all experiments matching a field/value pair (i.e. "Pubmedid","111222")
URL: /QueryExpDetail/?type=<type>&value=<value>
Method: GET
URL Params:
	type : str
		the detail type (i.e. "pubmedid"/"author"/etc.)
		(type from ExperimentsTable)
	value : str
		the detail value (i.e. "john smith"/"pmid003344"/etc.)
Success Response:
	Code : 200
	Content :
	{
		"experiments" : list of
		{
			expid : int
				the expId for an experiment matching the query
		}
	}
Details :
	Validation:
		If study is private, return only if user is authenticated and created the study. If user not authenticated, do not return it in the list
		If study is not private, return it (no need for authentication)


------------------------------------------------
Title: Query Ontology terms
Description : Get all ontology terms starting from a given id
				used to update the autocomplete list in the client
URL: /QueryOntology/?startid=<startid>
Method: GET
URL Params:
	startid : int
		retrieve all ontology terms with id bigger than startid (incremental update client)
		(id from OntologyTable)
Success Response:
	Code : 200
	Content :
	{
		"terms" : list of
		{
			"id" : int
				the ontology term id (id from OntologyTable)
			"description" : str
				the ontology term (description from OntologyTable)
		}
	}


------------------------------------------------
Title: Query Ontology synonyms
Description : Get all ontology synonyms starting from a given id
				used to update the autocomplete list in the client
URL: /QueryOntologySynonyms/?startid=<startid>
Method: GET
URL Params:
	startid : int
		retrieve all ontology synonyms with id bigger than startid (incremental update client)
		(id from OntologySynonymTable)
Success Response:
	Code : 200
	Content :
	{
		"terms" : list of
		{
			"id" : int
				the synonym relation id (id from SynonymTable)
			"synonymterm" : str
				the synonym term (description from OntologyTable linked by idSynonym from OntologySynonymTable)
			"originalterm" : str
				the ontology term to which it is a synonym (description from OntologyTable linked by idOntology)
		}
	}


------------------------------------------------
Title: Add new experiment detail
URL: /AddExpDetails/
Method: POST
URL Params:
Data Params:
	{
		"expId" : int
			(expId from ExperimentsTable) or 0 to add a new experiment
		"private" : bool (optional)
				default=False
				whether the experiment should be private or public (default)
				(private from Experiments)
		"details" : list of
		{
			"type" : str
				the detail type (i.e. "pubmedid"/"author"/etc.)
				(description from ExperimentTypesTable linked from ExperimentsIdentifiers)
			"value" : str
				the detail value (i.e. "john smith"/"pmid003344"/etc.)
				(value from ExperimentsIdentifiers)
		}
	}
Success Response:
	Code : 201
	Content :
	{
		"expId" : int
			the expId for the experiment with the details added
			same as the data expId if it was >0
			or the expId for the new experiment created
	}
Details:
	Validation:
		if expId>0, make sure the experiment exists
		If the detail already exists for the experiment, update it?
	Action:
		If ExpID=0, get a new unique experimentId (can use the current uniqueid in ExperimentsTable) and add the private field and the userID/Date
		Add entries into ExperimentsTable for all the pairs in the list. For each one, automatically add the userId and date
		Return the new expId for these details
		for each "type"/"value" in the "details" list, if "type" exists in ExperimentTypesTable, get the id and add it to "type" field in ExperimentsIdentifiers table. Otherwise, create it there and get the id and add it to "type" field in ExperimentsIdentifiers.


------------------------------------------------
Title: Add new annotation
URL: /AddAnnotation/
Method: POST
URL Params:
Data Params:
	{
		"expId" : int
			(expId from ExperimentsTable)
		"sequences" : list of str (ACGT)
			the sequences to add the annotation to
		"region" : int (optional)
			the region where the sequence is from (1 by default)
			(id from PrimersTable)
		"currType" : str
			curration type (differential expression/contaminant/etc.)
			(description from CurationTypesTable)
		"method" : str
			The method used to detect this behavior (i.e. observation/ranksum/clustering/etc")
			(description from MethodTypesTable)
		"agentType" : str
			Name of the program which submitted this annotation (i.e. heatsequer)
			(description from AgentTypesTable)
		"description" : str
			Free text describing this annotation (i.e. "lower in green tomatoes comapred to red ones")
		"private" : bool (optional)
			default=False
			is this annotation private
			private from CurationsTable
		"CurationList" : list of
			{
				"detail" : str
					the type of detail (i.e. ALL/HIGH/LOW)
					(description from CurationDetailsTypeTable)
				"term" : str
					the ontology term for this detail (i.e. feces/ibd/homo sapiens)
					(description from OntologyTable)
			}
	}
Success Response:
	Code : 201
	Content :
	{
		"currId" : int
		the id from CurationsTable for the new annotation.
	}
Details:
	Validation:
		expId exists in ExperimentsTable
		sequences are all valid ACGT sequences
		region is a valid id from PrimersTable
	Action:
		iterate over sequences, if sequence does not exist, add it to SequencesTable (what to do about taxonomy? - keep it empty?)
		if currType does not exist, add it to CurationTypesTable
		if method does not exist, add it to MethodTypesTable
		if agentType does not exist, add it to AgentTypesTable
		iterate over all CurationList:
			if detail does not exist, add it to CurationsDetailsTypeTable
			if term does not exist, add it to OntologyNamesTable
		Create a new curation in CurationsTable
		Add all sequence/curation pairs to SequenceCurationTable
		Add all annotation details to CurationsTable (automatically adding userId and addedDate)
		Add all pairs to CurationListTable


------------------------------------------------
Title: Add new ontology term
URL: /AddOntologyTerm/
Description : Add a new term to the ontology term list and link to parent, synonyms
Method: POST
URL Params:
Data Params:
	{
		"term" : str
			the new term to add (description from OntologyTable)
		"parent" : str (optional)
			default="root"
			if supplied, the id of the parent of this term (description from OntologyTable)
		"ontologyname" : str (optional)
			default = "scdb"
			name of the ontology to which this term belongs (i.e. "doid")
			(description from OntologyNamesTable
		"synonyms" : (optional) list of
		{
			"term" : str
				alternative names for the new ontology term
		}
	}
Success Response:
	Code : 201
	Content :
	{
		"id" : int
			the id of the new ontology term
	}
Details:
	Validation:
		if ontology does not exist (in OntologyNamesTable), fail
	Action:
		if term does not exist in OnologyTable, add it (description in OntologyTable).
		Get the term id (id in OntologyTable)
		If parent is supplied, if it does not exist in OntologyTable, add it. Get the parentid (id from OntologyTable for the parent). 
		Get the ontologynameid from the OntologyNamesTable. Add (ontologyId = termid, ontologyParentId = parentif, ontologyNameId = ontologynameid)
		for each sysnonym, if not in OntologyTable add it, get the synonymid, add to OntologySynymTable (idOntology = termid, idSynonym = synonymid)
